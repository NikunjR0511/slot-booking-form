[{"C:\\Users\\nkunj\\Desktop\\form-validation\\src\\App.js":"1","C:\\Users\\nkunj\\Desktop\\form-validation\\src\\components\\Signup.js":"2","C:\\Users\\nkunj\\Desktop\\form-validation\\src\\index.js":"3","C:\\Users\\nkunj\\Desktop\\form-validation\\src\\components\\TextField.js":"4","C:\\Users\\nkunj\\Desktop\\form-validation\\src\\styles\\form.js":"5","C:\\Users\\nkunj\\Desktop\\form-validation\\src\\components\\s.js":"6"},{"size":512,"mtime":1623835491047,"results":"7","hashOfConfig":"8"},{"size":6947,"mtime":1623844191479,"results":"9","hashOfConfig":"8"},{"size":255,"mtime":1623776322197,"results":"10","hashOfConfig":"8"},{"size":838,"mtime":1623834102991,"results":"11","hashOfConfig":"8"},{"size":332,"mtime":1623843313058,"results":"12","hashOfConfig":"8"},{"size":1364,"mtime":1623830438358,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ojc50u",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\nkunj\\Desktop\\form-validation\\src\\App.js",[],"C:\\Users\\nkunj\\Desktop\\form-validation\\src\\components\\Signup.js",["29","30"],"import React, {useEffect, useState} from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport useStyles from '../styles/form';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { withStyles} from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\n\r\nexport const Signup = () => {\r\n  const validate = Yup.object({\r\n    fullName: Yup.string()\r\n      .max(15, 'Must be 40 characters or less')\r\n      .required('Name is Required'),\r\n    email: Yup.string()\r\n      .email('Email is invalid')\r\n      .required('Email is required'),\r\n    location: Yup.string()\r\n      .max(15, 'Must be 15 characters or less')\r\n      .required('Location is required'),\r\n    department: Yup.string()\r\n      .max(15, 'Must be 15 characters or less')\r\n      .required('Department is required'),\r\n    date: Yup.string()\r\n      .max(20, 'Must be 20 characters or less')\r\n      .required('Date is required'),\r\n  \r\n  })\r\n\r\n  const ValidationTextField = withStyles({\r\n    root: {\r\n      '& input:valid + fieldset': {\r\n        borderColor: 'green',\r\n        borderWidth: 2,\r\n      },\r\n      '& input:invalid + fieldset': {\r\n        borderColor: 'red',\r\n        borderWidth: 2,\r\n      },\r\n      '& input:valid:focus + fieldset': {\r\n        borderLeftWidth: 6,\r\n        padding: '4px !important', // override inline-style\r\n      },\r\n    },\r\n  })(TextField);\r\n\r\n  const [departmentList, setDepartmentList] = useState([]);\r\n  const [locationList, setLocationList] = useState([]);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    \r\n    getdistslotdata();\r\n    \r\n  }, []);\r\n\r\n  const getdistslotdata = () => {\r\n    \r\n    axios\r\n      .post(\"http://api.gathan.in:8181//SlotBooking/getdistslotdata\", {\r\n      },{  headers: {'Access-Control-Allow-Origin': '*'}})\r\n      .then((res) => {\r\n        const items = res.data;\r\n        if (items.Department) {\r\n          setDepartmentList(items.Department);}\r\n          if (items.Location) {\r\n            setLocationList(items.Location);}\r\n\r\n      }).catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const bookSlot = (fullName,date,email,location,department) => {\r\n    \r\n    axios\r\n      .post(\"http://api.gathan.in:8181//SlotBooking/bookslot\", {\r\n        location:location,\r\n        department:department,\r\n        name:fullName,\r\n        emailId:email,\r\n        date:date,\r\n      },{  headers: {'Access-Control-Allow-Origin': '*'}})\r\n      .then((res) => {\r\n        const items = res.data;\r\n        alert(items);\r\n        console.log('per final API Call');\r\n      }).catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n \r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        fullName: '',\r\n        email: '',\r\n        location:'',\r\n        department:'',\r\n        date:''\r\n       \r\n      }}\r\n      validationSchema={validate}\r\n      onSubmit={values => {\r\n        console.log(values);\r\n        bookSlot(values.fullName,values.date,values.email,values.location,values.department)\r\n      }}\r\n    >\r\n      {formik => (\r\n        <div>\r\n          <h1 className={classes.textField}>Fix Your Slot</h1>\r\n          <Form>\r\n           \r\n             \r\n             <TextField\r\n             className={classes.textField}\r\n              fullWidth\r\n              required\r\n              id=\"fullName\"\r\n              name=\"fullName\"\r\n              label=\"Full  Name\"\r\n              variant=\"outlined\"\r\n              value={formik.values.fullName}\r\n              onChange={formik.handleChange}\r\n              error={(formik.touched.fullName) && Boolean(formik.errors.fullName)}\r\n              helperText={(formik.touched.fullName) && formik.errors.fullName}\r\n            />\r\n         \r\n            <TextField\r\n            className={classes.textField}\r\n              fullWidth\r\n              required\r\n              id=\"email\"\r\n              name=\"email\"\r\n              label=\"Email\"\r\n              variant=\"outlined\"\r\n              value={formik.values.email}\r\n              onChange={formik.handleChange}\r\n              error={(formik.touched.email) && Boolean(formik.errors.email)}\r\n              helperText={(formik.touched.email) && formik.errors.email}\r\n            />\r\n             <TextField\r\n             fullWidth\r\n             required\r\n            id=\"date\"\r\n            name=\"date\"\r\n            label=\"Date\"\r\n            type=\"date\"\r\n            variant=\"outlined\"\r\n            className={classes.textField}\r\n            value={formik.values.date}\r\n            onChange={formik.handleChange}\r\n            error={(formik.touched.date) && Boolean(formik.errors.date)}\r\n            helperText={(formik.touched.date) && formik.errors.date}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          />\r\n\r\n          \r\n\r\n        <FormControl variant=\"outlined\" className={classes.textField}fullWidth >\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">Location</InputLabel>\r\n        <Select\r\n        required\r\n          id=\"location\"\r\n          name=\"location\" \r\n          variant=\"outlined\"\r\n          value={formik.values.location}\r\n          onChange={formik.handleChange}\r\n          label=\"Location\"\r\n          error={(formik.touched.location) && Boolean(formik.errors.location)}\r\n        >\r\n         \r\n          { (locationList.map((item, index) => {\r\n                return <MenuItem value={item} key={item}>{item}</MenuItem>;\r\n              }))}\r\n        </Select>\r\n        <FormHelperText error>{(formik.touched.location) && formik.errors.location}</FormHelperText>\r\n\r\n        </FormControl>\r\n        \r\n        <FormControl variant=\"outlined\" className={classes.textField}fullWidth >\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">Department</InputLabel>\r\n        <Select\r\n        required\r\n          id=\"department\"\r\n          name=\"department\" \r\n          variant=\"outlined\"\r\n          value={formik.values.department}\r\n          onChange={formik.handleChange}\r\n          label=\"Department\"\r\n          error={(formik.touched.department) && Boolean(formik.errors.department)}\r\n        >\r\n         \r\n         { (departmentList.map((item, index) => {\r\n                return <MenuItem value={item} key={item}>{item}</MenuItem>;\r\n              }))}\r\n        </Select>\r\n        <FormHelperText error>{(formik.touched.department) && formik.errors.department}</FormHelperText>\r\n\r\n        </FormControl>\r\n      \r\n      \r\n        \r\n    \r\n\r\n            <button className=\"btn btn-dark mt-3\" type=\"submit\">Register</button>\r\n            <button className=\"btn btn-danger mt-3 ml-3\" type=\"reset\">Reset</button>\r\n          </Form>\r\n        </div>\r\n      )}\r\n    </Formik>\r\n  )\r\n}\r\n","C:\\Users\\nkunj\\Desktop\\form-validation\\src\\index.js",[],["31","32"],"C:\\Users\\nkunj\\Desktop\\form-validation\\src\\components\\TextField.js",["33"],"import React from 'react';\r\nimport { ErrorMessage, useField } from 'formik';\r\nimport useStyles from '../styles/form';\r\n\r\nexport const TextField = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className=\"mb-2\">\r\n      {/* <label htmlFor={field.name}>{label}</label> */}\r\n      {/* <input\r\n        className={`form-control shadow-none ${meta.touched && meta.error && 'is-invalid'}`}\r\n        {...field} {...props}\r\n        autoComplete=\"off\"\r\n      /> */}\r\n        <TextField\r\n              className={classes.textField}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              {...field} {...props}\r\n              \r\n             \r\n            />\r\n      <ErrorMessage component=\"div\" name={field.name} className=\"error\" />\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\nkunj\\Desktop\\form-validation\\src\\styles\\form.js",[],"C:\\Users\\nkunj\\Desktop\\form-validation\\src\\components\\s.js",[],{"ruleId":"34","severity":1,"message":"35","line":4,"column":8,"nodeType":"36","messageId":"37","endLine":4,"endColumn":14},{"ruleId":"34","severity":1,"message":"38","line":35,"column":9,"nodeType":"36","messageId":"37","endLine":35,"endColumn":28},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"34","severity":1,"message":"43","line":6,"column":17,"nodeType":"36","messageId":"37","endLine":6,"endColumn":21},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'ValidationTextField' is assigned a value but never used.","no-native-reassign",["44"],"no-negated-in-lhs",["45"],"'meta' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]