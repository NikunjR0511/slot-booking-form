[{"C:\\Users\\nkunj\\Desktop\\slot booking form\\src\\index.js":"1","C:\\Users\\nkunj\\Desktop\\slot booking form\\src\\components\\Signup.js":"2","C:\\Users\\nkunj\\Desktop\\slot booking form\\src\\App.js":"3","C:\\Users\\nkunj\\Desktop\\slot booking form\\src\\styles\\form.js":"4","C:\\Users\\nkunj\\Desktop\\slot booking form\\src\\components\\table.js":"5","C:\\Users\\nkunj\\Desktop\\slot booking form\\src\\styles\\table.js":"6"},{"size":255,"mtime":1623776322197,"results":"7","hashOfConfig":"8"},{"size":10620,"mtime":1624531305430,"results":"9","hashOfConfig":"8"},{"size":249,"mtime":1624530885570,"results":"10","hashOfConfig":"8"},{"size":427,"mtime":1624510058719,"results":"11","hashOfConfig":"8"},{"size":3190,"mtime":1624597326833,"results":"12","hashOfConfig":"8"},{"size":2048,"mtime":1624530233653,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"4udr47",{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\nkunj\\Desktop\\slot booking form\\src\\index.js",[],["28","29"],"C:\\Users\\nkunj\\Desktop\\slot booking form\\src\\components\\Signup.js",["30","31","32","33","34"],"import React, {useEffect, useState} from 'react';\r\nimport { Formik, Form, } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport useStyles from '../styles/form';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport { withStyles} from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport 'date-fns';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport dayjs from 'dayjs'\r\nimport Table from './table';\r\nimport peopleImg from '../assets/People collaborating remotely.svg';\r\n\r\n\r\n\r\nconst today=new Date();\r\nconst minimumDate = (today.getHours()<18 ? new Date(new Date().getTime() + (24 * 60 * 60 * 1000)): new Date(new Date().getTime() + 2*(24 * 60 * 60 * 1000)));\r\n\r\nexport const Signup = () => {\r\n  const validate = Yup.object({\r\n    fullName: Yup.string()\r\n      .max(15, 'Must be 40 characters or less')\r\n      .required('Name is Required'),\r\n    email: Yup.string()\r\n      .email('Email is invalid')\r\n      .required('Email is required'),\r\n    location: Yup.string()\r\n      .max(15, 'Must be 15 characters or less')\r\n      .required('Location is required'),\r\n    department: Yup.string()\r\n      .max(15, 'Must be 15 characters or less')\r\n      .required('Department is required'),\r\n    // date: Yup.string()\r\n    //   .max(20, 'Must be 20 characters or less')\r\n    //   .required('Date is required'),\r\n  \r\n  })\r\n\r\n  const ValidationTextField = withStyles({\r\n    root: {\r\n      '& input:valid + fieldset': {\r\n        borderColor: 'green',\r\n        borderWidth: 2,\r\n      },\r\n      '& input:invalid + fieldset': {\r\n        borderColor: 'red',\r\n        borderWidth: 2,\r\n      },\r\n      '& input:valid:focus + fieldset': {\r\n        borderLeftWidth: 6,\r\n        padding: '4px !important', // override inline-style\r\n      },\r\n    },\r\n  })(TextField);\r\n\r\n  const [departmentList, setDepartmentList] = useState([]);\r\n  const [locationList, setLocationList] = useState([]);\r\n  const [availableSlot, settAvailableSlot] = useState([]);\r\n\r\n  const[hour, setHour]=React.useState();\r\n  const [selectedDate, setSelectedDate] = React.useState(today.getHours()<18 ? new Date(new Date().getTime() + (24 * 60 * 60 * 1000)): new Date(new Date().getTime() + 2*(24 * 60 * 60 * 1000)));\r\n\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDate(date);\r\n  };\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    \r\n    getdistslotdata();\r\n    const h=(new Date().getHours());\r\n    setHour(h);\r\n    console.log(availableSlot.length);\r\n    console.log(availableSlot);\r\n    \r\n  }, []);\r\n\r\n  \r\n\r\n\r\n\r\n  const getdistslotdata = () => {\r\n    \r\n    axios\r\n      .post(\"http://api.gathan.in:8181//SlotBooking/getdistslotdata\", {\r\n      },{  headers: {'Access-Control-Allow-Origin': '*'}})\r\n      .then((res) => {\r\n        const items = res.data;\r\n        if (items.Department) {\r\n          setDepartmentList(items.Department);}\r\n          if (items.Location) {\r\n            setLocationList(items.Location);}\r\n\r\n      }).catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const bookSlot = (fullName,date,email,location,department) => {\r\n   \r\n    axios\r\n      .post(\"http://api.gathan.in:8181//SlotBooking/bookslot\", {\r\n        location:location,\r\n        department:department,\r\n        name:fullName,\r\n        emailId:email,\r\n        date:date,\r\n      },{  headers: {'Access-Control-Allow-Origin': '*'}})\r\n      .then((res) => {\r\n        const items = res.data;\r\n        alert(items);\r\n        // console.log('per final API Call');\r\n      }).catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const availableSlots = () => {\r\n    axios\r\n      .post(\"http://api.gathan.in:8181//SlotBooking/showavaliableslots2\", {\r\n      },{  headers: {'Access-Control-Allow-Origin': '*'}})\r\n      .then((res) => {\r\n        const items = res.data;\r\n        settAvailableSlot(items);\r\n        console.log(items);\r\n        console.log('per avalable slot API Call');\r\n      }).catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n \r\n\r\n  return (\r\n    <>\r\n     <div className=\"container mt-3\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-5\">\r\n    <Formik\r\n      initialValues={{\r\n        fullName: '',\r\n        email: '',\r\n        location:'',\r\n        department:'',\r\n        // date:''\r\n       \r\n      }}\r\n      validationSchema={validate}\r\n      onSubmit=  {values  => {\r\n        \r\n          console.log(minimumDate);\r\n          console.log(selectedDate);\r\n        if(dayjs(selectedDate).isBefore(dayjs(minimumDate)) ){\r\n          alert(\"Date is less than minimum date\");\r\n          return;\r\n        }\r\n        const year=(selectedDate.getFullYear());\r\n        const month=(selectedDate.getMonth()+1);\r\n        const date=(selectedDate.getDate());\r\n        \r\n       \r\n          let finalDate= (year+\"-\"+month+\"-\"+date);\r\n          \r\n          console.log(finalDate);\r\n          console.log(typeof(finalDate));\r\n        \r\n        console.log(values);\r\n        bookSlot(values.fullName,finalDate,values.email,values.location,values.department)\r\n      }}\r\n    >\r\n      {formik => (\r\n        <div>\r\n          <h1 className={classes.textField}>Fix Your Slot</h1>\r\n          <Form>\r\n           \r\n             \r\n             <TextField\r\n             className={classes.textField}\r\n              fullWidth\r\n              required\r\n              id=\"fullName\"\r\n              name=\"fullName\"\r\n              label=\"Full  Name\"\r\n              variant=\"outlined\"\r\n              value={formik.values.fullName }\r\n              onChange={formik.handleChange}\r\n              error={(formik.touched.fullName) && Boolean(formik.errors.fullName)}\r\n              helperText={(formik.touched.fullName) && formik.errors.fullName}\r\n            />\r\n         \r\n            <TextField\r\n            className={classes.textField}\r\n              fullWidth\r\n              required\r\n              id=\"email\"\r\n              name=\"email\"\r\n              label=\"Email\"\r\n              variant=\"outlined\"\r\n              value={formik.values.email }\r\n              onChange={formik.handleChange}\r\n              error={(formik.touched.email) && Boolean(formik.errors.email)}\r\n              helperText={(formik.touched.email) && formik.errors.email}\r\n            />\r\n             {/* <TextField\r\n             fullWidth\r\n             required\r\n            id=\"date\"\r\n            name=\"date\"\r\n            label=\"Date\"\r\n            type=\"date\"\r\n            minDate={new Date().toISOString().split(\"T\")[0]}\r\n            variant=\"outlined\"\r\n            className={classes.textField}\r\n            value={formik.values.date}\r\n            onChange={formik.handleChange}\r\n            error={(formik.touched.date) && Boolean(formik.errors.date)}\r\n            helperText={(formik.touched.date) && formik.errors.date}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          /> */}\r\n\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <KeyboardDatePicker\r\n          className={classes.textField}\r\n          fullWidth\r\n          required\r\n          disableToolbar\r\n          variant=\"inline\"\r\n          format=\"MM/dd/yyyy\"\r\n          margin=\"normal\"\r\n          id=\"date\"\r\n          name=\"date\"\r\n          label=\"Date\"\r\n          \r\n          \r\n          minDate={minimumDate}\r\n          // value={formik.values.date}\r\n          // onChange={formik.handleChange}\r\n          // error={(formik.touched.date) && Boolean(formik.errors.date)}\r\n          // helperText={(formik.touched.date) && formik.errors.date}\r\n          value={selectedDate}\r\n          onChange={handleDateChange}\r\n\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n         </MuiPickersUtilsProvider>\r\n         \r\n\r\n          \r\n\r\n        <FormControl variant=\"outlined\" className={classes.textField}fullWidth >\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">Location</InputLabel>\r\n        <Select\r\n        required\r\n          id=\"location\"\r\n          name=\"location\" \r\n          variant=\"outlined\"\r\n          value={formik.values.location}\r\n          onChange={formik.handleChange}\r\n          label=\"Location\"\r\n          error={(formik.touched.location) && Boolean(formik.errors.location)}\r\n        >\r\n         \r\n          { (locationList.map((item, index) => {\r\n                return <MenuItem value={item} key={item}>{item}</MenuItem>;\r\n              }))}\r\n        </Select>\r\n        <FormHelperText error>{(formik.touched.location) && formik.errors.location}</FormHelperText>\r\n\r\n        </FormControl>\r\n        \r\n        <FormControl variant=\"outlined\" className={classes.textField}fullWidth >\r\n        <InputLabel id=\"demo-simple-select-outlined-label\">Brand</InputLabel>\r\n        <Select\r\n        required\r\n          id=\"department\"\r\n          name=\"department\" \r\n          variant=\"outlined\"\r\n          value={formik.values.department}\r\n          onChange={formik.handleChange}\r\n          label=\"Department\"\r\n          error={(formik.touched.department) && Boolean(formik.errors.department)}\r\n        >\r\n         \r\n         { (departmentList.map((item, index) => {\r\n                return <MenuItem value={item} key={item}>{item}</MenuItem>;\r\n              }))}\r\n        </Select>\r\n        <FormHelperText error>{(formik.touched.department) && formik.errors.department}</FormHelperText>\r\n\r\n        </FormControl>\r\n      \r\n      \r\n        \r\n    \r\n\r\n            <button className=\"btn btn-dark mt-3\" type=\"submit\">Register</button>\r\n            <button className=\"btn btn-danger mt-3 ml-3\" type=\"reset\">Reset</button>\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.availableSlotButton}\r\n              onClick={() => {\r\n               availableSlots();\r\n              }}>\r\n              Show Available Slots\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n      )}\r\n    </Formik>\r\n    </div>\r\n        <div className=\"col-md-7 my-auto\">\r\n          <img className=\"img-fluid w-100\" src={peopleImg} alt=\"\"/>\r\n        </div>\r\n       \r\n      </div>  \r\n\r\n      {(availableSlot.length>0) && (\r\n        <Table availableSlot={availableSlot} />\r\n      )}\r\n      </div>\r\n   \r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\nkunj\\Desktop\\slot booking form\\src\\App.js",["35"],"C:\\Users\\nkunj\\Desktop\\slot booking form\\src\\styles\\form.js",[],"C:\\Users\\nkunj\\Desktop\\slot booking form\\src\\components\\table.js",[],"C:\\Users\\nkunj\\Desktop\\slot booking form\\src\\styles\\table.js",["36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":15,"column":8,"nodeType":"43","messageId":"44","endLine":15,"endColumn":12},{"ruleId":"41","severity":1,"message":"45","line":19,"column":3,"nodeType":"43","messageId":"44","endLine":19,"endColumn":21},{"ruleId":"41","severity":1,"message":"46","line":51,"column":9,"nodeType":"43","messageId":"44","endLine":51,"endColumn":28},{"ruleId":"41","severity":1,"message":"47","line":72,"column":9,"nodeType":"43","messageId":"44","endLine":72,"endColumn":13},{"ruleId":"48","severity":1,"message":"49","line":89,"column":6,"nodeType":"50","endLine":89,"endColumn":8,"suggestions":"51"},{"ruleId":"41","severity":1,"message":"52","line":2,"column":8,"nodeType":"43","messageId":"44","endLine":2,"endColumn":17},{"ruleId":"41","severity":1,"message":"53","line":1,"column":10,"nodeType":"43","messageId":"44","endLine":1,"endColumn":14},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'KeyboardTimePicker' is defined but never used.","'ValidationTextField' is assigned a value but never used.","'hour' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'availableSlot'. Either include it or remove the dependency array.","ArrayExpression",["56"],"'peopleImg' is defined but never used.","'blue' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"57","fix":"58"},"Update the dependencies array to be: [availableSlot]",{"range":"59","text":"60"},[2975,2977],"[availableSlot]"]